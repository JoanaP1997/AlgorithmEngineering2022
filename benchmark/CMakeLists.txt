#if(CMAKE_HOST_UNIX)
#  add_library(imported_binaries STATIC IMPORTED)
#  set_target_properties(imported_binaries PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/binaries/libbinaries-gcc.a)
#elseif(CMAKE_HOST_WIN32)
#    message("Host system is windows -> no support yet")
#elseif(CMAKE_HOST_APPLE)
#  message("Host system is macOS -> no support yet")
#endif()

if (CMAKE_CXX_COMPILER_ID MATCHES GNU)
    message("Using GCC library binary file.")
    set(path_to_binary_lib "${CMAKE_SOURCE_DIR}/binaries/libbinaries-gcc.a")
elseif(CMAKE_CXX_COMPILER_ID MATCHES Clang)
    message("Using Clang library binary file.")
    set(path_to_binary_lib "${CMAKE_SOURCE_DIR}/binaries/libbinaries-clang.a")
else()
    message(ERROR "No library binary file exists for '${CMAKE_CXX_COMPILER_ID}'. If you absolutely need to use this compiler, please contact the Algorithm Engineering lecture team.")
endif()

add_library(imported_binaries STATIC IMPORTED)
set_target_properties(imported_binaries PROPERTIES IMPORTED_LOCATION "${path_to_binary_lib}")

add_executable(mst_construction_benchmark mst_construction_benchmark.cpp)
target_link_libraries(mst_construction_benchmark PRIVATE base_target implementation imported_binaries)

add_executable(mst_verification_benchmark mst_verification_benchmark.cpp)
target_link_libraries(mst_verification_benchmark PRIVATE base_target implementation imported_binaries)
